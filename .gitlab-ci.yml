# Jobs are used to create builds, which are then picked up by Runners and 
# executed within the environment of the Runner. What is important, is that 
# each job is run independently from each other.
image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.8.9-oracle21.1.-trusted-certs

# First all jobs of build are executed in parallel.
# If all jobs of build succeed, the test jobs are executed in parallel.
# If all jobs of test succeed, the deploy jobs are executed in parallel.
# If all jobs of deploy succeed, the commit is marked as success.
# If any of the previous jobs fails, the commit is marked as failed and no jobs of further stage are executed.
stages:
  - install
  - security
  - test
  - standards
  - release

variables:
 GIT_SSL_NO_VERIFY: "true"
 ## helper variables to enable verbose output for debugging purposes
 #GIT_CURL_VERBOSE: "1"
 #GIT_DEBUG_LOOKUP: "1"
 #GIT_TRANSLOOP_DEBUG: "1"
 #GIT_TRANSPORT_HELPER_DEBUG: "1"

## runs everytime before any job is executed
before_script:
   - echo "---------> Set required system variables"
   - export http_proxy=http://proxy.nbs.sk:3128
   - export https_proxy=http://proxy.nbs.sk:3128

## JOBS
Package_installation:3.8:
  stage: install
  script:
   - echo "---------> Install Package"
   - python --version
   - python setup.py install
  when: on_success

#Package_installation:3.9:
#  stage: install
#  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.9.4-oracle21.1
#  script:
#   - echo "---------> Install Package"
#   - python --version
#   - python setup.py install
#   when: on_success
#
#Package_installation:3.6:
#  stage: install
#  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.6.13-oracle21.1
#  script:
#   - echo "---------> Install Package"
#   - python --version
#   - python setup.py install
#   when: on_success

Dlint_code_analysis:
  stage: security
  before_script:
   - echo "---------> Install dlint"
   - pip install dlint --quiet
  script:
   - echo "---------> Run Security Static Code Analysis"
   - flake8 --select=DUO setup.py identifier_tools
  when: on_success

Bandit_code_analysis:
  stage: security
  before_script:
   - echo "---------> Install Bandit"
   - pip install bandit --quiet
  script:
   - echo "---------> Run Security Static Code Analysis"
   - bandit -r identifier_tools -x identifier_tools/tests 
  when: on_success

PEP8_code_standards:
  stage: standards
  script:
   - echo "---------> Install Flake8"
   - pip install flake8 --quiet
   - echo "---------> Run Code Standards Analysis"
   - flake8 setup.py identifier_tools
  when: on_success

Code_Complexity:
   stage: standards
   script:
    - echo "---------> Install Radon"
    - pip install radon --quiet
    - echo "---------> Compute Maintainability Index"
    - radon mi identifier_tools -i tests
    - echo "---------> Compute Cyclomatic Complexity"
    - radon cc identifier_tools -a -i tests
   when: on_success

Test_code_Python:3.9:
  stage: test
  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.9.4-oracle21.1
  script:
   - python --version
   - echo "---------> Install pytest and coverage"
   - pip install pytest pytest-cov --quiet
   - echo "---------> Run tests and get coverage"
   - pytest --cov identifier_tools
  when: on_success

Test_code_Python:3.8:
  stage: test
  script:
   - python --version
   - echo "---------> Install pytest and coverage"
   - pip install pytest pytest-cov --quiet
   - echo "---------> Run tests and get coverage"
   - pytest --cov identifier_tools
  when: on_success

Test_code_Python:3.6:
  stage: test
  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.6.13-oracle21.1
  script:
   - python --version
   - echo "---------> Install pytest"
   - pip install pytest --quiet
   - echo "---------> Run tests"
   - pytest identifier_tools
  when: on_success

ReleasePackage:
  stage: release
  script:
   - ls -l /etc/ssl/certs/
   - ls -l /usr/share/ca-certificates/
   - echo "---------> Install twine"
   - pip install twine
   - echo "---------> Release Package"
   - python setup.py sdist bdist_wheel
   - echo "---------> Upload to GitLab PyPI"
   - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=package-bot python -m twine upload --repository-url https://gitlab.nbs.sk/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/* --cert /usr/share/ca-certificates/nbs.crt
  when: on_success
  only:
   - tags
